#!/usr/bin/env bash
FILE=${_#*/}

# Setup error handlers
set -eou pipefail
trap 'printf "$FILE:$FUNCNAME:$LINENO: $_\n" 1>&2' ERR EXIT

# Simple helper functions to avoid excessively long lines when checking for
# loaded launchd plists
list_loaded ()
{
    launchctl list $1 >/dev/null 2>&1
}

sudo_list_loaded ()
{
    sudo -p "Enter password to query launchd about $1:" \
        sh -c "launchctl list $1 >/dev/null 2>&1"
}


# Install a symlink to a config file
symlink_config ()
{
    local src="$1"
    local dst="$2"
    updated=0
    shift 2

    # If the correct symlink already exists, do nothing.
    if [ -L "$dst" ] && [ "$src" = "$(readlink "$dst")" ]; then
        return 0
    # If the target is the correct file type OR a symlink to the wrong file
    elif [ -f "$src" -a -f "$dst" ] || [ -d "$src" -a -d "$dst" ] || [ -L "$dst" ]; then
        while true; do
            # Prompt user for action
            printf "Wrong source file found for:\n$dst\n"
            printf "(D)iff changes/(O)verwrite file/(K)eep file? [Dok?] "
            read COMMAND

            if [ -z "$COMMAND" ]; then
                COMMAND=d
            fi

            case "$COMMAND" in
                [dD])
                    # Check the symlink target
                    if [ -L "$dst" ]; then
                        printf "$dst\nLinks to:\n$(readlink "$dst")\n%s"
                                "Should link to:\n$src\n"
                    # Diff the files
                    else
                        diff -ur "$dst" "$src" | less
                    fi
                    ;;
                [oO])
                    # Try to overwrite the file. $@ contains optional sudo
                    # command.
                    if "$@" rm -- "$dst" && "$@" ln -s -- "$src" "$dst"; then
                        updated=1
                    else
                        printf "Failed to resymlink $dst\n" 1>&2
                    fi

                    printf "\n"
                    break
                    ;;
                [kK])
                    printf "\n"
                    break
                    ;;
                ?)
                    printf "d - show diff between current and repo file\n"
                    printf "o - overwrite current file with repo symlink\n"
                    printf "k - keep the current file\n"
                    printf "? - this help\n"
                    ;;
            esac

            printf "\n"
        done
    elif [ ! -e "$dst" ]; then
        # The destination doesn't exists, so try to symlink it. $@ contains
        # optional sudo command.
        if "$@" ln -s -- "$src" "$dst"; then
            updated=1
        else
            printf "Failed to symlink $dst\n" 1>&2
        fi
    else
        printf "$dst already exists and is not a file, directory or symlink!\n" 1>&2
    fi
}

sudo_symlink_config ()
{
    symlink "$1" "$2" sudo -p "\"Enter password to symlink $2:\""
}

install_config ()
{
    local src="$1"
    local dst="$2"
    updated=0
    shift 2

    # If the target is the correct file type
    if [ -f "$src" -a -f "$dst" ] || [ -d "$src" -a -d "$dst" ]; then
        # As long as the file doesn't match the installable file
        while ! diff -ur "$src" "$dst" >/dev/null 2>&1; do
            # Prompt user for action.
            printf "Wrong source file found for:\n$dst\n"
            printf "(D)iff changes/(O)verwrite file/(K)eep file? [Dok?] "
            read COMMAND

            if [ -z "$COMMAND" ]; then
                COMMAND=d
            fi

            case "$COMMAND" in
                [dD])
                    diff -ur "$dst" "$src" | less
                    ;;
                [oO])
                    # Attempt to copy over. $@ contains optional sudo command.
                    if "$@" cp -r -- "$src" "$dst"; then
                        updated=1
                    else
                        printf "Failed to update $dst\n" 1>&2
                    fi

                    printf "\n"
                    break
                    ;;
                [kK])
                    printf "\n"
                    break
                    ;;
                ?)
                    printf "d - show diff between current and repo file\n"
                    printf "o - overwrite current file with repo symlink\n"
                    printf "k - keep the current file\n"
                    printf "? - this help\n"
                    ;;
            esac

            printf "\n"
        done
    elif [ ! -e "$dst" ]; then
        # Attempt to copy over. $@ contains optional sudo command.
        if "$@" cp -r -- "$src" "$dst"; then
            updated=1
        else
            printf "Failed to copy to $dst\n" 1>&2
        fi
    else
        printf "$dst already exists and is not a file or directory!\n" 1>&2
    fi
}

sudo_install_config ()
{
    install_config "$1" "$2" sudo -p "Enter password to install $2:"
}

install_repo ()
{
    repo_name="${2##*/}"
    repo_name="${repo_name%.git}"

    if [ ! -d "$1/$repo_name" ]; then
        hg clone --noupdate "$2" "$1/$repo_name" >/dev/null 2>&1
    fi

    if [ ! -d "$1/$repo_name" ]; then
        printf "Not a mercurial repo: $1/$repo_name\n" 1>&2
        exit 1
    fi

    cd "$1/$repo_name"

    printf "Checking for updates to ${repo_name}...\n"
    hg pull >/dev/null 2>&1
    count () {
        hg log -T 'Version: {rev}\n' -r 'descendants(.) - .' | \
            grep 'Version' | wc -l | awk '{print $1}' 2>/dev/null
    }

    if [ "$(count)" -ge "1" ]; then
        while true; do
            printf "$(count) new commits in $1/$repo_name\n"
            printf "(D)iff new commits/(U)pdate/(K)eep current? [Duk?] "
            read COMMAND

            if [ -z "$COMMAND" ]; then
                COMMAND=d
            fi

            case "$COMMAND" in
                [dD])
                    hg log -p -r 'descendants(.) - .'
                    ;;
                [uU])
                    hg update -C
                    break
                    ;;
                [kK])
                    break
                    ;;
                ?)
                    printf "d - show diff between current and repo file\n"
                    printf "u - update repository to latest revision\n"
                    printf "k - keep the current revision\n"
                    printf "? - this help\n"
                    ;;
            esac
        done
    fi

    cd - >/dev/null
}

for link in dotfiles/*; do
    symlink_config "$(pwd)/$link" "$HOME/.${link##*/}"
done

for install_script in install/*/install.sh; do
    src="$(pwd)/${install_script%install.sh}"
    . "$install_script"
done

# Read and set standard paths and environment variables
[ -f ~/.bash_env ] && . ~/.bash_env

# Interactive bash have 'i' in $-, load .bashrc for interactive scripts. Don't
# run rest of script for non-interactive login shells.
case $- in
    *i*) [ -f ~/.bashrc ] && . ~/.bashrc;;
    *) return 0;;
esac

TMUX_CMD="bash"
if [ "$(uname)" = "Darwin" ]; then
    TMUX_CMD="reattach-to-user-namespace bash"
fi

set_escape() {
    case $TERM in
        cons*)
            if [ `id -u` -ne 0 ]; then
                [ $(which startx | wc -l) -eq 1 ] && startx && exit
            else
                if [ $(which tmux | wc -l) -eq 1\
                    -o $(which screen | wc -l) -eq 1 ]; then

                    printf "Start tmux/screen? (y/n) "
                    read ESCAPE

                    [ "$ESCAPE" = "n" ] && return 0
                fi
            fi

            ESCAPE=^Dd
            ;;

        screen*)
            while true; do
                printf "%s\n"\
                "Running a new screen/tmux inside a screen/tmux session. Enter "\
                "an escape sequence for the new session (format: ^Dd) or \"None\""\
                "to stop starting screen: "

                read ESCAPE

                if [ -z "$ESCAPE" ]; then
                    ESCAPE=^Dd
                    break
                fi

                case $ESCAPE in
                    ^[A-Z][a-z])
                        if [ "${ESCAPE:1:1}" = $(echo "${ESCAPE:2:1}" | tr '[a-z]' '[A-Z]') ]; then
                            break
                        fi
                        ;;
                    [Nn][Oo][Nn][Ee])
                        return 1
                        ;;
                esac
            done
            ;;

        xterm*)
            ESCAPE=^Dd
            ;;
    esac

    export ESCAPE
    return 0
}

if [ $(which tmux | wc -l) -eq 1 ]; then
    if ! tmux attach; then
        if ! set_escape; then
            return 0
        fi
        ESCAPE=`expr $ESCAPE : "\(..\)"`
        tmux new "$TMUX_CMD" && exit
    else
        exit
    fi
elif [ $(which screen | wc -l) -eq 1 ]; then
    if [ $(screen -ls | grep "\(No Sockets found in\)" | wc -l) -eq 1 ]; then
        set_escape
        screen -e $ESCAPE && exit
    else
        screen -DRR && exit
    fi
fi

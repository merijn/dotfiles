# Settings for all shells
# Set various aliases and functions

alias grep='grep -I'
alias hig='history | grep -i'
alias ls='ls -FG'       # ls always shows colour and type (dir, link, etc)
alias la='ls -aFG'      # Like above but shows dotfiles/-directories
alias ll='ls -lhoAFG'   # Show file flags in long mode with human readable size
alias lg='ls -lhoAFG | grep -i' # Case insensitive grep on ls
alias ulimit='ulimit -S'
alias more='less'
alias ghci='ghci -ignore-dot-files -ghci-script ~/.ghci'
alias config='sed -n "s/^package-db.*/--&/p" .ghc.environment.* | xargs cabal-1.24 configure --enable-tests'

runcabal ()
{
    local exe="$1"
    shift 1
    `cabal-plan list-bin "$exe"` $*
}

rlist ()
{
    ssh -q $1 tmux list-buffers
}

if [ ! -z "$BASH_VERSION" -a ! -z "$PS1" ]; then
    TITLEBAR="\[\e]0;\u@\h:\w\007\]" # Sets titlebar of xterm/PuTTy to \u@\h:\w
    CAPTION="\[\e]0;\w\007\]"        # Sets screen status bar to CWD
    JOBS="\[\e[0;36m\]"              # Bright cyan, no. of background jobs
    EXIT="\[\e[0;31m\]"              # Bright red, error exit code
    TIME="\[\e[1;37m\]"              # Bright white, clock colours
    CWD="\[\e[1;34m\]"               # Pale blue, top directory
    CLEAR="\[\e[0m\]"                # Clear colour changes

    if [ $UID -eq 0 ]; then
        USERCOLOR="\[\e[0;31m\]"     # Red if running as root
    else
        USERCOLOR="\[\e[0;32m\]"     # Green otherwise
    fi

    prompt_status ()
    {
        local status=$?
        [ $status = 0 ] && return
        echo -n " $status"
    }

    # Default prompt (for TMUX)
    PS1="$USERCOLOR\u $CWD\W $JOBS\j$EXIT\$(prompt_status)$CLEAR\$ "

    if [[ $TERM =~ cons* ]]; then
        # Prompt when running on console
        PS1="$TIME\$(date "+%H:%M") $PS1"
    elif [[ $STY ]]; then
        # Add caption to set the CWD in screen's statusbar
        PS1="$CAPTION$PS1"
    elif [[ $TERM =~ screen* && ! $TMUX ]]; then
        # Prompt when running in a remote screen
        PS1="$USERCOLOR\u@\h $CWD\W $JOBS\j$EXIT\$(prompt_status)$CLEAR\$ "
    elif [[ ! $TMUX ]]; then
        # Set terminal titlebar to user@host:path for all other terminals
        PS1="$TITLEBAR$TIME\$(date "+%H:%M") $PS1"
    fi

    # Set various shell options
    shopt -s no_empty_cmd_completion
    shopt -s nocaseglob   # * matches case insensitively
    shopt -s extglob      # Enable extended bash patterns
    shopt -s histreedit   # Edit line on failed history substitution
    shopt -s cmdhist      # Multi-line command are stored multi-line in history
    shopt -s lithist      # Store multi-line history entries with s/;/\n
    shopt -s checkwinsize # Check terminal size after each command
    set -o vi             # Set vi keybindings.

    # Commands (colon separated) not added to the history
    HISTIGNORE="fortune*:history*" # Stop me from wasting time on fortune!
    HISTTIMEFORMAT='%H:%M ' # Fixes multiline command history
    HISTCONTROL=ignorespace
    HISTSIZE=1000000      # Number of history lines to keep
    unset HISTFILE
    if type sync_history >/dev/null 2>&1; then
        last_cmd_no ()
        {
            last_cmd=$(HISTTIMEFORMAT='	' history 1)
            if [ $? -eq 0 -a -n "$last_cmd" ]; then
                last_cmd="${last_cmd##*( )}"
                last_cmd="${last_cmd%%	*}"
            else
                last_cmd="0"
            fi
        }

        last_cmd_no
        prompt_command ()
        {
            local old="$last_cmd"
            local reset=""
            local newhist=""
            last_cmd_no

            if [ "$old" -ne "$last_cmd" ]; then
                local cmd=$(HISTTIMEFORMAT='	' history 1)
                cmd=${cmd##*	}
                history -d $last_cmd
                newhist="$(sync_history update $$ "$cmd")"
                reset=$?
                unset cmd
            else
                newhist="$(sync_history update $$)"
                reset=$?
            fi

            if [ -n "$newhist" ]; then
                history -r /dev/stdin <<<"$newhist"
            fi

            if [ $reset -eq 2 ]; then
                history -cr "$HOME/.bash_history"
            fi
            last_cmd_no
        }
        PROMPT_COMMAND="prompt_command; $PROMPT_COMMAND"
        trap "sync_history deregister $$" EXIT
    else
        shopt -s histappend   # Append to .bash_history instead of overwriting
    fi


    # Set OS specific aliases and settings or overwrites
    if [ "$(uname)" = "Darwin" ]; then
        if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
            . /opt/local/etc/profile.d/bash_completion.sh
        fi
        alias make="make -j`/usr/sbin/sysctl -n hw.ncpu`"
        bind 'set completion-ignore-case on'

        rcopy ()
        {
            ssh -q $1 tmux save-buffer -b ${2:-0} - | pbcopy
        }

        rpaste ()
        {
            pbpaste | ssh -q $1 tmux load-buffer -b ${2:-0} -
        }

    elif [ "$(uname)" = "FreeBSD" ]; then
        alias rm='rm -rI' # (Recursively) delete and ask confirmation for >3 files
        if [ -f /usr/local/etc/bash_completion ]; then
            . /usr/local/etc/bash_completion
        fi

        if [ -f /usr/local/share/mercurial/contrib/bash_completion ]; then
            . /usr/local/share/mercurial/contrib/bash_completion
        fi
    elif [ "$(uname)" = "Linux" ]; then
        alias make="make -j`awk '/^processor/{n+=1}END{print n}' /proc/cpuinfo`"
        alias ls='ls -F --color=auto'
        alias la='ls -aF --color=auto'
        alias ll='ls -lhoAF --color=auto'
        alias lg='ls -lhoAF --color=auto | grep -i'
    fi

    if ! type ag >/dev/null 2>&1; then
        ag () {
            grep --color=always -r $1 . | less -FSRX
        }
    else
        alias ag='ag --pager "less -FXR"'
    fi
fi

st () {
    if [ $TMUX ]; then
        tmux renamew $*
    else
        echo -ne "\033k$*\033\\"
    fi
}

mq () {
    local queue=$(hg qqueue --active)
    if [ "$queue" = "patches" ]; then
        hg -R $(hg root)/.hg/patches $*
    else
        hg -R $(hg root)/.hg/patches-$queue $*
    fi
}

# Read and set any machine local overrides
[ -f ~/.bashrc_local ] && . ~/.bashrc_local || true

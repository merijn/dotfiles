"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set langmenu=none               "Set all the menu's to use English
if &t_Co >= 256 || has("gui_running")
    colorscheme delph256        "Use custom 256 colour scheme
else
    colorscheme delph           "Use custom minimal colour scheme
endif
if has("autocmd")
    "Clear all autocommands to avoid duplicates, has to be on empty line
    autocmd!
    filetype plugin indent on   "Load filetype specific plugins and indent file
endif
set nomodeline                  "Exploitable, should be off
set ruler                       "Show cursor position
set hidden                      "Don't force me to save before changing buffers
set list                        "Show hidden characters
set listchars=tab:»»,trail:·    "What to show instead of characters
set magic                       "Commands treat backslash escaped chars as
                                "control chars
set clipboard+=unnamed          "Let me paste directly from Windows clipboard
set lazyredraw                  "Don't update screen during macro's, etc.
if has("mouse")
    set mouse=a                 "Allow mouse in all modes except insert
endif
set confirm                     "Prompt save confirmation instead of returning
                                "error for command
set shortmess+=I                "Disable showing splash screen
set belloff=esc,backspace       "Don't play bell sound on ESC in normal mode or
                                "backspace error

let mapleader = "\<C-g>"        "Map leader key
"Y behaves as D and C rather than yy
noremap Y y$

"Make Ctrl-A a noop so it doesn't conflict with tmux mapping and clobber
"numbers all over
noremap <silent> <C-A> <Nop>

function s:isOSX()
    if has("unix")
        let s:uname = system("uname")
        " Use Monaco font on OS X
        if s:uname =~ "Darwin"
            return 1
        endif
    endif
    return 0
endfunction

if has('nvim')
    " Don't show statusline in neovim
    set laststatus=0
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Edit options                                                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set scrolloff=5                 "Keep this many lines visible at top/bottom
set bs=indent,eol,start         "Turn on backspace in insert mode
set textwidth=79                "Maximum linewidth
set wildmenu                    "Show all auto-completion options
" Tab specific option
set tabstop=8                   "A tab is 8 spaces
set expandtab                   "Always uses spaces instead of tabs
set softtabstop=4               "Insert 4 spaces when tab is pressed
set shiftwidth=4                "An indent is 4 spaces
set smarttab                    "Indent instead of tab at start of line
set shiftround                  "Round spaces to nearest shiftwidth multiple
set nojoinspaces                "Don't convert spaces to tabs
set formatoptions=cjnqr
"Regular expression to detect the start of numbered lists in comments and text
"files.
let &formatlistpat='^\s+\(\d\+[\]:.)}\t ]\|[\*+-@#]\)\s*'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search options                                                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ignorecase                  "Turn of case sensitivity
set smartcase                   "Only enable above for strings in all lowercase
set incsearch                   "Search while typing query
if &t_Co > 2 || has("gui_running")
    set hlsearch                "Highlight all search matches if color is
endif                           "possible (:noh to toggle off)

set gdefault                    "Substitution affect all matches on a line
"Remap return key to toggle highlight off when pressing enter in command mode.
nnoremap <silent> <return> :noh<return>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File browsing options                                                       "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Ignore various binary file types when completing file names
set wildignore+=*.o,*.lo,*.la,*.a,*.so,.*.d,*.pyc,.DS_Store,*.aux,*.bbl,*.blg
set wildignore+=*.lof,*.log,*.lot,*.toc,*.pdf,*.hi,*.p_o,*.p_hi,*.dyn_hi
set wildignore+=*.dyn_o,*/.git/*,*/.svn/*,*/.hg/*,*/dist/*,*.dSYM/*,*.d
set wildignore+=*/dist-newstyle/*,*/build/*,*.class

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Programming options                                                         "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Only do the following outside of vimdiff
if !&diff
    set number                      "Enable line numbers
endif

if &t_Co > 2 || has("gui_running")
    syntax on                   "Turn on syntax highlighting
endif

" Folding options
if version >= 600
    set foldenable              "Enable folding if available
    set foldmethod=syntax       "Fold on syntax
    set foldopen=block,hor,insert,jump,mark,percent,undo
endif

if has('nvim')
    nnoremap <silent> <tab> :lua vim.lsp.buf.hover()<return>
    nnoremap <silent> <Leader>g :lua vim.lsp.buf.definition()<return>
    nnoremap <silent> <Leader>f :lua vim.lsp.buf.references()<return>
    nnoremap <silent> <Leader>i :lua vim.lsp.buf.implementation()<return>
    "nnoremap <silent> <Leader>s :lua vim.lsp.codelens.run()<return>
    nnoremap <silent> <Leader>s :MetalsSuperMethodHierarchy<return>
endif

" Use rg for :grep
let &grepprg="rg --vimgrep"
command! -nargs=+ Rg execute 'silent grep! <args>' | cwindow

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Miscellaneous options                                                       "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !&diff && (&t_Co > 2 || has("gui_running"))  "Match characters past column
    match LineTooLong /\%>79v.\+/               "79 to mark as red.
endif

function s:CheckSpellFileUpToDate(file)
    if filereadable(a:file) && (!filereadable(a:file . '.spl') || getftime(a:file) > getftime(a:file . '.spl'))
        exec 'mkspell! ' . fnameescape(a:file)
    endif
endfunction

function SetLocalSpelling(path)
    let spellfiles = []
    let where = a:path

    while l:where != '/' && l:spellfiles == []
        let l:spellfiles = globpath(l:where, "*.add", 0, 1)
        if l:spellfiles == []
            let l:where = fnamemodify(l:where, ":h")
        endif
    endwhile

    for d in l:spellfiles
        call s:CheckSpellFileUpToDate(d)
    endfor
    let &spellfile=join(l:spellfiles, ',')
endfunction

" English spell checking, turn off by default except for TeX/LaTeX files.
if version >= 700
    " Run manually to fetch spellfiles from vim FTP server
    set spelllang=en_gb,nl spell
    set nospell

    " Check if binary spell files are outdated and rebuild if necessary
    for d in glob('~/.vim/spell/*.add', 1, 1)
        call s:CheckSpellFileUpToDate(d)
    endfor

    if has("autocmd")
        autocmd BufNewFile,BufRead *.rst,*.txt,*.tex,*.latex setlocal spell
        autocmd BufNewFile,BufRead *.rst,*.txt,*.tex,*.latex call SetLocalSpelling(expand('<afile>:p:h'))
        autocmd FileType help setlocal nospell
        autocmd BufNewFile,BufRead *.rst,*.txt,*.tex,*.latex setlocal formatoptions+=t

        autocmd BufNewFile,BufRead CMakeLists.txt setlocal nospell
    endif
endif

autocmd BufNewFile,BufRead *.ptx setlocal ft=asm
let g:tex_flavor='latex'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI options                                                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("gui_running")
    set guioptions-=r   "Disable right-hand scrollbar
    set guioptions-=R   "Disable split-window right-hand scrollbar
    set guioptions-=l   "Disable left-hand scrollbar
    set guioptions-=L   "Disable split-window left-hand scrollbar present

    if s:isOSX()
        set guifont=Monaco:h14
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc options & commands                                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -range=% StripWhitespace :%s/\s\+$//
if has('nvim')
  command! ShowSyntax :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
else
  command! ShowSyntax :Inspect
endif
command! ShowHighlight :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remote copy/paste support                                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function s:RawGrab(operation, host, buf, type, ...)
    let sel_save = &selection
    let &selection = "inclusive"
    let reg_save = @@
    if has("unix")
        let s:uname = substitute(system("uname -s"), '\n\+$', '', '')

        if s:uname == "Linux"
            let cmd = "EVENT_NOEPOLL=1 tmux load-buffer"
        else
            " Environment variable to work around broken libevent on DAS5
            let cmd = "tmux load-buffer"
        endif
    endif
    if !empty(a:host)
        let cmd = "ssh -q " . a:host . " " . l:cmd
    endif

    if !empty(a:buf)
        let cmd = l:cmd . " -b " . a:buf
    endif

    if a:0 " Invoked from Visual mode, use gv command.
        silent exe "normal! gv".a:operation
    elseif a:type == 'line'
        silent exe "normal! '[V']".a:operation
    else
        silent exe "normal! `[v`]".a:operation
    endif

    call system(l:cmd . " - ", @@)
    redraw!

    let &selection = sel_save
    let @@ = reg_save
endfunction

function s:RawPaste(host, buf)
    let cmd = "tmux save-buffer"
    if !empty(a:host)
        let cmd = "ssh -q " . a:host . " " . l:cmd
    endif

    if !empty(a:buf)
        let cmd = l:cmd . " -b " . a:buf
    endif

    set paste
    silent exe ":r !" . l:cmd . " -"
    set nopaste
    redraw!
endfunction

function YankLocal(type, ...)
    call s:RawGrab("y", "", "", a:type, a:000)
endfunction

function YankLocalBuf(type, ...)
    let buf = input("Buffer: ")
    call s:RawGrab("y", "", l:buf, a:type, a:000)
endfunction

function YankRemote(type, ...)
    let host = input("Host: ")
    call s:RawGrab("y", l:host, "", a:type, a:000)
endfunction

function YankRemoteBuf(type, ...)
    let host = input("Host: ")
    let buf = input("Buffer: ")
    call s:RawGrab("y", l:host, l:buf, a:type, a:000)
endfunction

function DeleteLocal(type, ...)
    call s:RawGrab("d", "", "", a:type, a:000)
endfunction

function DeleteLocalBuf(type, ...)
    let buf = input("Buffer: ")
    call s:RawGrab("d", "", l:buf, a:type, a:000)
endfunction

function DeleteRemote(type, ...)
    let host = input("Host: ")
    call s:RawGrab("d", l:host, "", a:type, a:000)
endfunction

function DeleteRemoteBuf(type, ...)
    let host = input("Host: ")
    let buf = input("Buffer: ")
    call s:RawGrab("d", l:host, l:buf, a:type, a:000)
endfunction

function PasteLocal()
    call s:RawPaste("", "")
endfunction

function PasteLocalBuf()
    let buf = input("Buffer: ")
    call s:RawPaste("", l:buf)
endfunction

function PasteRemote()
    let host = input("Host: ")
    call s:RawPaste(l:host, "")
endfunction

function PasteRemoteBuf()
    let host = input("Host: ")
    let buf = input("Buffer: ")
    call s:RawPaste(l:host, l:buf)
endfunction

if !empty($TMUX)
    noremap <silent> <Leader>p :call PasteLocal()<CR>
    inoremap <silent> <Leader>p <ESC>:call PasteLocal()<CR>i
    noremap <silent> <Leader>bp :call PasteLocalBuf()<CR>
    inoremap <silent> <Leader>bp <ESC>:call PasteLocalBuf()<CR>i

    nnoremap <silent> <Leader>y :set opfunc=YankLocal<CR>g@
    vnoremap <silent> <Leader>y :<C-U>call YankLocal(visualmode(), 1)<CR>
    nnoremap <silent> <Leader>by :set opfunc=YankLocalBuf<CR>g@
    vnoremap <silent> <Leader>by :<C-U>call YankLocalBuf(visualmode(), 1)<CR>

    nnoremap <silent> <Leader>d :set opfunc=DeleteLocal<CR>g@
    vnoremap <silent> <Leader>d :<C-U>call DeleteLocal(visualmode(), 1)<CR>
    nnoremap <silent> <Leader>bd :set opfunc=DeleteLocalBuf<CR>g@
    vnoremap <silent> <Leader>bd :<C-U>call DeleteLocalBuf(visualmode(), 1)<CR>
endif

noremap <silent> <Leader>rp :call PasteRemote()<CR>
inoremap <silent> <Leader>rp <ESC>:call PasteRemote()<CR>i
noremap <silent> <Leader>rbp :call PasteRemoteBuf()<CR>
inoremap <silent> <Leader>rbp <ESC>:call PasteRemoteBuf()<CR>i

nnoremap <silent> <Leader>ry :set opfunc=YankRemote<CR>g@
vnoremap <silent> <Leader>ry :<C-U>call YankRemote(visualmode(), 1)<CR>
nnoremap <silent> <Leader>rby :set opfunc=YankRemoteBuf<CR>g@
vnoremap <silent> <Leader>rby :<C-U>call YankRemoteBuf(visualmode(), 1)<CR>

nnoremap <silent> <Leader>ry :set opfunc=DeleteRemote<CR>g@
vnoremap <silent> <Leader>ry :<C-U>call DeleteRemote(visualmode(), 1)<CR>
nnoremap <silent> <Leader>rby :set opfunc=DeleteRemoteBuf<CR>g@
vnoremap <silent> <Leader>rby :<C-U>call DeleteRemoteBuf(visualmode(), 1)<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickfix List Functions                                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')
    au DiagnosticChanged * lua vim.diagnostic.setloclist({ open = false })
endif

function GetNextError(next)
    " If there's no error, do nothing
    if len(getloclist(0)) == 0
    " If there's one error, jump to it
    elseif len(getloclist(0)) == 1
        ll
    " If we're going forward
    elseif a:next
        " Try to go to the next error
        try
            lnext
        " On error rewind to the start (wrap-around)
        catch
            lrewind
        endtry
    else
        " Try to go to the previous error
        try
            lprev
        " On error jump to the last error (wrap-around)
        catch
            llast
        endtry
    endif
endfunction

function ToggleQuickFix()
    " If a quickfix list is open, close it and exit function
    for winnr in range(1, winnr('$'))
        if getwinvar(winnr, '&syntax') == 'qf'
            cclose
            return
        endif
    endfor

    " No open quickfix list to close, open it if not empty
    if len(getqflist()) != 0
        copen
    endif
endfunction

function ToggleErrorList()
    " Check if loclist is open
    if get(getloclist(0, {'winid':0}), 'winid', 0)
        lclose
    elseif len(getloclist(0)) != 0
        " Open the location list
        lopen
        " Jump back to previously active window, so loclist preview does not
        " appear
        wincmd p
    else
        call ToggleQuickFix()
    endif
endfunction

nnoremap <silent> <C-j> :call GetNextError(1)<CR>
nnoremap <silent> <C-k> :call GetNextError(0)<CR>
nnoremap <silent> \ :call ToggleErrorList()<return>
nnoremap <silent> <C-\> :call ToggleQuickFix()<return>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Options                                                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Load Pathogen to deal with plugins
runtime bundle/vim-pathogen/autoload/pathogen.vim

call pathogen#infect()
" Rebuild database of help tags so pathogen plugin help works.
Helptags

" Ctrl-P options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>t :CtrlPMixed<return>
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_mruf_relative = 1
" Ignore files inside node_modules, .git, .hg, .svn, and .swp files
let g:ctrlp_custom_ignore = '\v[\/](node_modules)|(\.(swp|ico|git|svn|hg|metals))|target$'

" Gundo options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <F1> :GundoToggle<CR>
let g:gundo_preview_bottom = 1
let g:gundo_right = 1
if has('python3')
    let g:gundo_prefer_python3 = 1
endif

" TagBar options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <F2> :TagbarToggle<CR>
let g:tagbar_autoclose = 1
let g:tagbar_sort = 0

" ALE options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function s:shescape(string) abort
    return a:string =~# '\m^[A-Za-z0-9_/.-]\+$' ? a:string : shellescape(a:string)
endfunction

function FindLocalConfig(file, where)
    let cfg = findfile(a:file, escape(a:where, ' ') . ';')
    if cfg ==# ''
        return { 'lines' : [], 'root' : "" }
    endif

    let lines = readfile(cfg)
    " filter out empty lines and comments
    call filter(lines, 'v:val !~# ''\v^(\s*#|$)''')

    " remove leading and trailing spaces
    call map(lines, 'substitute(v:val, ''^\s\+'', "", "")')
    call map(lines, 'substitute(v:val, ''\s\+$'', "", "")')
    call map(lines, 's:shescape(v:val)')
    return { 'lines' : lines, 'root' : fnamemodify(cfg, ":p:h") . '/' }
endfunction

let g:ale_virtualtext_cursor = 'disabled'
let g:ale_echo_msg_format = "%code: %%s [%linter%]"
highlight ALEWarning cterm=underline

" Rainbow Parentheses options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['white',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['red',         'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['gray',        'RoyalBlue3'],
    \ ]

augroup RainbowParentheses
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
augroup END

" Tabularize options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap <Leader>= :Tabularize /=<CR>
nnoremap <Leader>= :Tabularize /=<CR>

" Supertab options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else " no gui
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif
